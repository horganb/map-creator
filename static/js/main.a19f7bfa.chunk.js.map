{"version":3,"sources":["Home.js","usePersistedState.js","Editor.js","App.js","reportWebVitals.js","index.js"],"names":["mapsUrl","initialMapData","name","image","url","pins","Home","useState","maps","setMaps","history","useHistory","useEffect","axios","get","then","data","catch","e","console","error","goToMap","mapId","push","mapLinks","map","_id","Button","className","variant","onClick","color","post","usePersistedState","defaultValue","path","value","setValue","useParams","updateMap","updates","method","UpdateMethods","SET","updateObject","put","newValue","persist","UNSET","Editor","imageURL","setImageURL","mapName","setMapName","setPins","selectedPin","setSelectedPin","loading","setLoading","setError","setImage","displayData","TextField","label","onChange","target","Object","keys","pinId","pinData","x","y","relativeX","width","relativeY","height","isSelected","Fragment","style","left","top","onPinClick","onContextMenu","preventDefault","otherPins","onPinRightClick","pin","onClose","show","setPin","newData","src","el","rect","getBoundingClientRect","window","scrollX","scrollY","getPosition","pageX","pageY","id","generateId","addPin","alt","ref","imageEl","CircularProgress","PinCard","title","description","Card","opacity","pointerEvents","undefined","CardHeader","action","IconButton","CardContent","multiline","rows","log","prefix","App","exact","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a19f7bfa.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { Button } from '@material-ui/core';\r\n\r\n// export const mapsUrl = 'http://localhost:3000';\r\n// export const mapsUrl = 'http://192.168.37.94:3000';\r\nexport const mapsUrl = 'https://map-creator-backend.herokuapp.com';\r\n\r\nconst initialMapData = {\r\n  name: 'Untitled Map',\r\n  image: {\r\n    url: 'https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885__480.jpg',\r\n  },\r\n  pins: {},\r\n};\r\n\r\nconst Home = () => {\r\n  const [maps, setMaps] = useState([]);\r\n  const history = useHistory();\r\n\r\n  // On initial load, load the list of maps.\r\n  useEffect(() => {\r\n    axios\r\n      .get(`${mapsUrl}/maps`)\r\n      .then(({ data }) => {\r\n        setMaps(data);\r\n      })\r\n      .catch(e => {\r\n        console.error(e);\r\n      });\r\n  }, []);\r\n\r\n  const goToMap = mapId => {\r\n    history.push(`/maps/${mapId}`);\r\n  };\r\n\r\n  const mapLinks = maps.map(({ name, _id }) => {\r\n    return (\r\n      <Button\r\n        className=\"map-button\"\r\n        key={_id}\r\n        variant=\"contained\"\r\n        onClick={() => goToMap(_id)}\r\n      >\r\n        {name}\r\n      </Button>\r\n    );\r\n  });\r\n\r\n  const newMap = () => {\r\n    axios\r\n      .post(`${mapsUrl}/maps`, initialMapData)\r\n      .then(({ data }) => {\r\n        goToMap(data);\r\n      })\r\n      .catch(e => {\r\n        console.error(e);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Button\r\n          className=\"map-button\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={newMap}\r\n        >\r\n          Create New\r\n        </Button>\r\n        {mapLinks}\r\n      </header>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { mapsUrl } from './Home';\r\n\r\nconst usePersistedState = (defaultValue, path) => {\r\n  const [value, setValue] = useState(defaultValue);\r\n  const { mapId } = useParams();\r\n\r\n  const updateMap = (updates, method = UpdateMethods.SET) => {\r\n    const updateObject = {\r\n      [method]: updates,\r\n    };\r\n    axios\r\n      .put(`${mapsUrl}/maps/${mapId}`, updateObject)\r\n      .then(() => {})\r\n      .catch(e => {\r\n        console.error(e);\r\n      });\r\n  };\r\n\r\n  const updateValue = (newValue, persist = true) => {\r\n    setValue(newValue);\r\n    if (persist) {\r\n      updateMap({\r\n        [path]: newValue,\r\n      });\r\n    }\r\n  };\r\n\r\n  return [value, updateValue];\r\n};\r\n\r\nexport default usePersistedState;\r\n\r\nconst UpdateMethods = {\r\n  SET: '$set',\r\n  UNSET: '$unset',\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { mapsUrl } from './Home';\r\nimport {\r\n  Button,\r\n  TextField,\r\n  CircularProgress,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  IconButton,\r\n} from '@material-ui/core';\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { v4 as generateId } from 'uuid';\r\nimport usePersistedState from './usePersistedState';\r\n\r\nconst Editor = () => {\r\n  const { mapId } = useParams();\r\n  const history = useHistory();\r\n\r\n  const [imageURL, setImageURL] = usePersistedState('', 'image.url');\r\n  const [mapName, setMapName] = usePersistedState('', 'name');\r\n  const [pins, setPins] = usePersistedState({}, 'pins');\r\n\r\n  const [selectedPin, setSelectedPin] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n  const [image, setImage] = useState();\r\n\r\n  // When map is changed, load in the data\r\n  useEffect(() => {\r\n    if (mapId) {\r\n      setLoading(true);\r\n      axios\r\n        .get(`${mapsUrl}/maps/${mapId}`)\r\n        .then(({ data }) => {\r\n          setError(false);\r\n          const { name, image, pins } = data;\r\n          setImageURL(image.url, false);\r\n          setMapName(name, false);\r\n          setPins(pins, false);\r\n        })\r\n        .catch(e => {\r\n          console.error(e);\r\n          setError(true);\r\n        })\r\n        .then(() => {\r\n          setLoading(false);\r\n        });\r\n    }\r\n  }, [mapId]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const goHome = () => {\r\n    history.push('/');\r\n  };\r\n\r\n  const getPosition = el => {\r\n    const rect = el.getBoundingClientRect();\r\n    return {\r\n      left: rect.left + window.scrollX,\r\n      top: rect.top + window.scrollY,\r\n    };\r\n  };\r\n\r\n  const addPin = (x, y) => {\r\n    const id = generateId();\r\n    setPins({\r\n      ...pins,\r\n      [id]: { x, y },\r\n    });\r\n  };\r\n\r\n  const onImageClick = e => {\r\n    const { left, top } = getPosition(image);\r\n    const relativeX = e.pageX - left;\r\n    const relativeY = e.pageY - top;\r\n    const xFraction = relativeX / image.width;\r\n    const yFraction = relativeY / image.height;\r\n    addPin(xFraction, yFraction);\r\n  };\r\n\r\n  const onPinClick = pinId => {\r\n    setSelectedPin(pinId === selectedPin ? null : pinId);\r\n  };\r\n\r\n  const onPinRightClick = (pinId, e) => {\r\n    e.preventDefault();\r\n    const { [pinId]: _, ...otherPins } = pins;\r\n    setPins(otherPins);\r\n    setSelectedPin();\r\n  };\r\n\r\n  const renderPins = () =>\r\n    image &&\r\n    Object.keys(pins).map(pinId => {\r\n      const pinData = pins[pinId];\r\n      if (!pinData) return undefined;\r\n      const { x, y } = pinData;\r\n      const relativeX = x * image.width;\r\n      const relativeY = y * image.height;\r\n      const isSelected = selectedPin === pinId;\r\n      return (\r\n        <React.Fragment key={pinId}>\r\n          <RoomIcon\r\n            className=\"pin\"\r\n            style={{\r\n              left: relativeX,\r\n              top: relativeY,\r\n              color: isSelected ? 'yellow' : 'red',\r\n            }}\r\n            onClick={() => onPinClick(pinId)}\r\n            onContextMenu={e => onPinRightClick(pinId, e)}\r\n          />\r\n          <PinCard\r\n            pin={pinData}\r\n            x={relativeX}\r\n            y={relativeY}\r\n            onClose={() => setSelectedPin()}\r\n            show={isSelected}\r\n            setPin={newData => {\r\n              setPins({\r\n                ...pins,\r\n                [pinId]: newData,\r\n              });\r\n            }}\r\n          />\r\n        </React.Fragment>\r\n      );\r\n    });\r\n\r\n  const imageCallback = imageEl => {\r\n    if (imageEl && imageEl !== image) {\r\n      setImage(imageEl);\r\n    }\r\n  };\r\n\r\n  const displayData = !loading && !error;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div className=\"metadata-section\">\r\n          <Button\r\n            className=\"return-home\"\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            onClick={goHome}\r\n          >\r\n            Back to Home\r\n          </Button>\r\n          {displayData && (\r\n            <>\r\n              <br />\r\n              <TextField\r\n                className=\"map-name\"\r\n                label=\"Map Name\"\r\n                value={mapName}\r\n                onChange={e => setMapName(e.target.value)}\r\n                variant=\"outlined\"\r\n              />\r\n              <br />\r\n              <TextField\r\n                className=\"image-url\"\r\n                label=\"Image URL\"\r\n                value={imageURL}\r\n                onChange={e => setImageURL(e.target.value)}\r\n                variant=\"filled\"\r\n              />\r\n            </>\r\n          )}\r\n        </div>\r\n        {displayData && (\r\n          <div className=\"image-container\">\r\n            {renderPins()}\r\n            <img\r\n              src={imageURL}\r\n              onClick={onImageClick}\r\n              className=\"App-logo\"\r\n              alt=\"logo\"\r\n              ref={imageCallback}\r\n            />\r\n            {/* {renderPinCard()} */}\r\n          </div>\r\n        )}\r\n        {loading && <CircularProgress />}\r\n        {error && <p>Could not load the requested map!</p>}\r\n      </header>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n\r\nconst PinCard = ({ x, y, pin, setPin, onClose, show }) => {\r\n  // TODO: use Popper for this?\r\n\r\n  const { title, description, color } = pin;\r\n  return (\r\n    <Card\r\n      className=\"description-card\"\r\n      style={{\r\n        left: x,\r\n        top: y,\r\n        opacity: show ? 1 : 0,\r\n        pointerEvents: show ? undefined : 'none',\r\n      }}\r\n    >\r\n      <CardHeader\r\n        title={\r\n          <TextField\r\n            className=\"title-field\"\r\n            label=\"Item Title\"\r\n            value={title}\r\n            onChange={e => setPin({ ...pin, title: e.target.value })}\r\n          />\r\n        }\r\n        action={\r\n          <IconButton onClick={onClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        }\r\n      />\r\n      <CardContent>\r\n        <TextField\r\n          className=\"body-field\"\r\n          label=\"Item Description\"\r\n          value={description}\r\n          onChange={e => setPin({ ...pin, description: e.target.value })}\r\n          variant=\"outlined\"\r\n          multiline\r\n          rows={3}\r\n        />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n","import './App.css';\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\nimport Editor from './Editor';\nimport Home from './Home';\n\nconsole.log('got app');\n\nconst prefix = '/map-creator';\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path={`${prefix}/`}>\n          <Home />\n        </Route>\n        <Route path={`${prefix}/maps/:mapId`}>\n          <Editor />\n        </Route>\n        <Redirect to={`${prefix}/`} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}